function hFig = plot_wds_4( ...
    s, ...
    add_nodes, ...
    add_node_labels, ...
    add_edge_labels, ...
    edge_vals, ...
    edge_vels, ...
    title_text, ...
    ylabel_text, ...
    vmin, ...
    vmax)

 s.nodes.X= s.nodes.X/1000;
 s.nodes.Y= s.nodes.Y/1000;

% -------------------------------------------------------------------------
% 1) INPUT CHECKS
% -------------------------------------------------------------------------
if nargin < 10
    error(['plot_wds_4 requires ten inputs: ', ...
        '(s, add_nodes, add_node_labels, add_edge_labels, edge_vals, ', ...
        'edge_vels, fignum, ylabel_text, vmin, vmax).']);
end

M = numel(s.edges.ID);
if numel(edge_vals) ~= M
    error('edge_vals must be length %d (number of edges).', M);
end
if numel(edge_vels) ~= M
    error('edge_vels must be length %d (number of edges).', M);
end

% -------------------------------------------------------------------------
% 2) CREATE FIGURE & SETUP
% -------------------------------------------------------------------------
hFig = figure%(fignum);
clf(hFig);
hold on;
%
xlim([0.9*min(s.nodes.X) 1.1*max(s.nodes.X)])
ylim([0.9*min(s.nodes.Y) 1.1*max(s.nodes.Y)])

axis equal;

cmap = [0.678, 0.847, 0.902;   % light blue (RGB ~ powderblue)
    1.0,   0.0,   0.0];   % strong red
cmap=colormap(interp1([0 1], cmap, linspace(0,1,256)));


% -------------------------------------------------------------------------
% 3) PLOT EACH EDGE (LINE + OPTIONAL EDGE‐ID + CENTERED ARROW)
% -------------------------------------------------------------------------
for i = 1:M
    idx_pair = s.edges.node_idx{i};  % [node_i, node_j]
    ni = idx_pair(1);
    nj = idx_pair(2);

    x_i = s.nodes.X(ni);
    y_i = s.nodes.Y(ni);
    x_j = s.nodes.X(nj);
    y_j = s.nodes.Y(nj);

    % 3a) Choose edge color from colormap
    %cidx = scaled(i);
    %edge_color = cmap(cidx, :);
    tcol = (edge_vals(i) - vmin) / (vmax - vmin);
    tcol = max(0, min(1, tcol));   % clamp if outside

    % Map normalized value to an index in colormap
    idx = round( 1 + tcol*(size(cmap,1)-1) );
    edge_color = cmap(idx,:);


    % 3b) Draw the line for this edge
    plot([x_i, x_j], [y_i, y_j], '-', ...
        'Color',     edge_color, ...
        'LineWidth', 1.5);

    % 3c) If requested, place the edge ID at the (offset) midpoint
    if add_edge_labels == 1
        xm = 0.5*(x_i + x_j);
        ym = 0.5*(y_i + y_j);
        dx_e = x_j - x_i;
        dy_e = y_j - y_i;
        L_e = hypot(dx_e, dy_e);
        if L_e > 0
            off = 0.02;
            ux_p = -dy_e / L_e;
            uy_p =  dx_e / L_e;
        else
            ux_p = 0; uy_p = 0;
        end
        text( xm + off*ux_p, ...
            ym + off*uy_p, ...
            s.edges.ID{i}, ...
            'FontSize', 9, ...
            'HorizontalAlignment', 'center', ...
            'VerticalAlignment', 'middle', ...
            'BackgroundColor', 'w', ...
            'Margin', 1, ...
            'Interpreter', 'none');
    end

    % 3d) If edge_vels(i) ≠ 0, draw a small arrow at edge‐midpoint
    v = edge_vels(i);
    if v ~= 0
        % Full vector from i→j
        dx_full = x_j - x_i;
        dy_full = y_j - y_i;
        L_full = hypot(dx_full, dy_full);
        if L_full == 0
            continue;  % zero‐length edge → skip arrow
        end

        % Determine direction:
        %   if v>0, arrow i→j; if v<0, arrow j→i
        if v > 0
            u_x = dx_full / L_full;
            u_y = dy_full / L_full;
        else
            u_x = -dx_full / L_full;
            u_y = -dy_full / L_full;
        end

        % Midpoint of the edge
        xm = 0.5*(x_i + x_j);
        ym = 0.5*(y_i + y_j);

        % Arrow length = 20% of full‐edge length
        lam = 0.20 * L_full;

        % Place arrow so it’s centered at (xm, ym):
        %   tail at (xm - 0.5*lam*u_x, ym - 0.5*lam*u_y)
        x_tail = xm - 0.5*lam*u_x;
        y_tail = ym - 0.5*lam*u_y;
        dx_arr  = lam * u_x;
        dy_arr  = lam * u_y;

        % Draw arrow using quiver with no autoscale
        quiver( x_tail, y_tail, dx_arr, dy_arr, 0, ...
            'Color',       edge_color, ...
            'LineWidth',   1.5, ...
            'MaxHeadSize', 2.0, ...
            'AutoScale',   'off');
    end
end

% -------------------------------------------------------------------------
% 4) PLOT NODES (optional) AND NODE LABELS (optional)
% -------------------------------------------------------------------------
if add_nodes == 1
    scatter(s.nodes.X, s.nodes.Y, 60, 'ro', 'filled');
end

if add_node_labels == 1
    for k = 1:numel(s.nodes.ID)
        text( s.nodes.X(k), ...
            s.nodes.Y(k), ...
            sprintf('%s', s.nodes.ID{k}), ...
            'VerticalAlignment',   'bottom', ...
            'HorizontalAlignment', 'right',  ...
            'FontSize',           10, ...
            'Interpreter', 'none');
    end
end

% -------------------------------------------------------------------------
% 5) ADD COLORBAR FOR EDGE‐VALUE → COLOR MAPPING
% -------------------------------------------------------------------------

colormap(cmap);
cb = colorbar;
caxis([vmin, vmax]);
ylabel(cb, ylabel_text);



title(title_text)
hold off;
end
